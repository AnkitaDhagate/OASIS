import java.sql.*;

public class ReservationSystem {
    private static final String DB_URL = "jdbc:sqlite:reservation_system.db";

    public static void main(String[] args) {
        createTables();
        int userId = loginOrRegister();

        while (true) {
            System.out.println("\n1. Make Reservation\n2. Cancel Reservation\n3. Logout");
            int choice = Integer.parseInt(System.console().readLine());

            switch (choice) {
                case 1:
                    makeReservation(userId);
                    break;
                case 2:
                    cancelReservation(userId);
                    break;
                case 3:
                    System.out.println("Logged out successfully!");
                    return;
                default:
                    System.out.println("Invalid choice!");
            }
        }
    }

    private static void createTables() {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {
            stmt.execute("CREATE TABLE IF NOT EXISTS users (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "username TEXT UNIQUE NOT NULL," +
                    "password TEXT NOT NULL)");

            stmt.execute("CREATE TABLE IF NOT EXISTS reservations (" +
                    "pnr INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "user_id INTEGER," +
                    "train_number TEXT NOT NULL," +
                    "train_name TEXT NOT NULL," +
                    "class_type TEXT NOT NULL," +
                    "journey_date TEXT NOT NULL," +
                    "from_place TEXT NOT NULL," +
                    "to_place TEXT NOT NULL," +
                    "FOREIGN KEY (user_id) REFERENCES users(id))");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static int loginOrRegister() {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement stmt = conn.prepareStatement("SELECT * FROM users WHERE username = ? AND password = ?")) {
            while (true) {
                System.out.println("1. Login\n2. Register");
                int choice = Integer.parseInt(System.console().readLine());

                if (choice == 1) {
                    String username = System.console().readLine("Enter username: ");
                    String password = System.console().readLine("Enter password: ");
                    stmt.setString(1, username);
                    stmt.setString(2, password);
                    ResultSet rs = stmt.executeQuery();
                    if (rs.next()) {
                        System.out.println("Login successful!");
                        return rs.getInt("id");
                    } else {
                        System.out.println("Invalid credentials!");
                    }
                } else if (choice == 2) {
                    String username = System.console().readLine("Enter username: ");
                    String password = System.console().readLine("Enter password: ");
                    stmt.setString(1, username);
                    stmt.setString(2, password);
                    try {
                        stmt.executeUpdate("INSERT INTO users (username, password) VALUES (?, ?)");
                        System.out.println("Registration successful! You can now log in.");
                    } catch (SQLException e) {
                        if (e.getErrorCode() == 19) { // SQLite error code for UNIQUE constraint violation
                            System.out.println("Username already exists!");
                        } else {
                            e.printStackTrace();
                        }
                    }
                } else {
                    System.out.println("Invalid choice!");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0; // Error condition
    }

    // ... (Implement makeReservation and cancelReservation methods similarly, using prepared statements)
}
