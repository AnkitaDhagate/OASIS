import java.util.ArrayList;
import java.util.Scanner;

class ATM {
  private double balance;
  private ArrayList<String> transactionHistory = new ArrayList<>();

  // Constructor to initialize balance
  public ATM() {
    this.balance = 0.0;
  }

  // Deposit money
  public void deposit(double amount) {
    if (amount > 0) {
      balance += amount;
      transactionHistory.add("Deposited: $" + amount);
      System.out.println("Successfully deposited $" + amount);
    } else {
      System.out.println("Deposit amount must be positive.");
    }
  }

  // Withdraw money
  public void withdraw(double amount) {
    if (amount > 0 && amount <= balance) {
      balance -= amount;
      transactionHistory.add("Withdrew: $" + amount);
      System.out.println("Successfully withdrew $" + amount);
    } else if (amount > balance) {
      System.out.println("Insufficient funds!");
    } else {
      System.out.println("Withdrawal amount must be positive.");
    }
  }

  // Transfer money (simplified, doesn't handle recipient)
  public void transfer(double amount) {
    if (amount > 0 && amount <= balance) {
      balance -= amount;
      transactionHistory.add("Transferred: $" + amount);
      System.out.println("Successfully transferred $" + amount);
    } else if (amount > balance) {
      System.out.println("Insufficient funds!");
    } else {
      System.out.println("Transfer amount must be positive.");
    }
  }

  // Show transaction history
  public void showTransactionHistory() {
    if (transactionHistory.isEmpty()) {
      System.out.println("No transactions to show.");
    } else {
      System.out.println("Transaction History:");
      for (String transaction : transactionHistory) {
        System.out.println(transaction);
      }
    }
  }

  // Check balance
  public void checkBalance() {
    System.out.println("Your current balance is: $" + balance);
  }
}

public class ATMSystem {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    ATM atm = new ATM();

    // Removed insecure authentication for demonstration
    // Consider secure methods for real applications

    displayMenu(atm, scanner);
    scanner.close();
  }

  public static void displayMenu(ATM atm, Scanner scanner) {
    boolean quit = false;
    while (!quit) {
      System.out.println("\nATM Menu:");
      System.out.println("1. Transaction History");
      System.out.println("2. Withdraw");
      System.out.println("3. Deposit");
      System.out.println("4. Transfer");
      System.out.println("5. Quit");
      System.out.print("Choose an option: ");

      int choice = scanner.nextInt();

      switch (choice) {
        case 1:
          atm.showTransactionHistory();
          break;
        case 2:
          System.out.print("Enter amount to withdraw: ");
          double withdrawAmount = getPositiveDouble(scanner);
          atm.withdraw(withdrawAmount);
          break;
        case 3:
          System.out.print("Enter amount to deposit: ");
          double depositAmount = getPositiveDouble(scanner);
          atm.deposit(depositAmount);
          break;
        case 4:
          System.out.print("Enter amount to transfer: ");
          double transferAmount = getPositiveDouble(scanner);
          atm.transfer(transferAmount);
          break;
        case 5:
          System.out.println("Thank you for using the ATM System. Goodbye!");
